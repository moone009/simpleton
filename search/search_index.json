{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"simpleton \u00b6 A package containing simple modules that you probably would not need. Free software: MIT Documentation: https://simpleton.readthedocs.io Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#simpleton","text":"A package containing simple modules that you probably would not need. Free software: MIT Documentation: https://simpleton.readthedocs.io","title":"simpleton"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for simpleton. nlp \u00b6 count_tokens ( column , ngrams ) \u00b6 Consumes a pandas dataframe column and counts the number of tokens. Parameters \u00b6 pd.core.series.Series Input list int The number of tokens 1 = unigram, 2 = bigram, 3 = trigram, etc. Returns \u00b6 pd.core.frame.DataFrame A dataframe containing the token and count. Source code in simpleton\\nlp.py def count_tokens ( column : pd . core . series . Series , ngrams : int ) -> pd . core . frame . DataFrame : \"\"\" Consumes a pandas dataframe column and counts the number of tokens. Parameters ---------- column: pd.core.series.Series Input list ngrams: int The number of tokens 1 = unigram, 2 = bigram, 3 = trigram, etc. Returns ------- output: pd.core.frame.DataFrame A dataframe containing the token and count. \"\"\" word_vectorizer = CountVectorizer ( ngram_range = ( ngrams , ngrams ), analyzer = 'word' ) sparse_matrix = word_vectorizer . fit_transform ( column ) frequencies = sum ( sparse_matrix ) . toarray ()[ 0 ] output = pd . DataFrame ( frequencies , index = word_vectorizer . get_feature_names (), columns = [ 'Frequency' ]) . sort_values ( \"Frequency\" , ascending = False ) output . reset_index ( level = 0 , inplace = True ) output . rename ( columns = { 'index' : 'Token' }, inplace = True ) return output process \u00b6 chunks ( lst , n ) \u00b6 Converts a list into chunks of smaller lists. Parameters \u00b6 list Input list int The number of bins Returns \u00b6 list A list of lists. Source code in simpleton\\process.py def chunks ( lst : list , n : int ) -> list : \"\"\" Converts a list into chunks of smaller lists. Parameters ---------- lst: list Input list n: int The number of bins Returns ------- chunks: list A list of lists. \"\"\" chunks = [ lst [ x : x + n ] for x in range ( 0 , len ( lst ), n )] return chunks","title":"modules"},{"location":"api/#simpleton.nlp","text":"","title":"nlp"},{"location":"api/#simpleton.nlp.count_tokens","text":"Consumes a pandas dataframe column and counts the number of tokens.","title":"count_tokens()"},{"location":"api/#simpleton.nlp.count_tokens--parameters","text":"pd.core.series.Series Input list int The number of tokens 1 = unigram, 2 = bigram, 3 = trigram, etc.","title":"Parameters"},{"location":"api/#simpleton.nlp.count_tokens--returns","text":"pd.core.frame.DataFrame A dataframe containing the token and count. Source code in simpleton\\nlp.py def count_tokens ( column : pd . core . series . Series , ngrams : int ) -> pd . core . frame . DataFrame : \"\"\" Consumes a pandas dataframe column and counts the number of tokens. Parameters ---------- column: pd.core.series.Series Input list ngrams: int The number of tokens 1 = unigram, 2 = bigram, 3 = trigram, etc. Returns ------- output: pd.core.frame.DataFrame A dataframe containing the token and count. \"\"\" word_vectorizer = CountVectorizer ( ngram_range = ( ngrams , ngrams ), analyzer = 'word' ) sparse_matrix = word_vectorizer . fit_transform ( column ) frequencies = sum ( sparse_matrix ) . toarray ()[ 0 ] output = pd . DataFrame ( frequencies , index = word_vectorizer . get_feature_names (), columns = [ 'Frequency' ]) . sort_values ( \"Frequency\" , ascending = False ) output . reset_index ( level = 0 , inplace = True ) output . rename ( columns = { 'index' : 'Token' }, inplace = True ) return output","title":"Returns"},{"location":"api/#simpleton.process","text":"","title":"process"},{"location":"api/#simpleton.process.chunks","text":"Converts a list into chunks of smaller lists.","title":"chunks()"},{"location":"api/#simpleton.process.chunks--parameters","text":"list Input list int The number of bins","title":"Parameters"},{"location":"api/#simpleton.process.chunks--returns","text":"list A list of lists. Source code in simpleton\\process.py def chunks ( lst : list , n : int ) -> list : \"\"\" Converts a list into chunks of smaller lists. Parameters ---------- lst: list Input list n: int The number of bins Returns ------- chunks: list A list of lists. \"\"\" chunks = [ lst [ x : x + n ] for x in range ( 0 , len ( lst ), n )] return chunks","title":"Returns"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/cmooney/simpleton/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 simpleton could always use more documentation, whether as part of the official simpleton docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/cmooney/simpleton/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up simpleton for local development. Fork the simpleton repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/simpleton.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/cmooney/simpleton/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_simpleton ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/cmooney/simpleton/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"simpleton could always use more documentation, whether as part of the official simpleton docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/cmooney/simpleton/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up simpleton for local development. Fork the simpleton repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/simpleton.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/cmooney/simpleton/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_simpleton ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-11-05) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-11-05","text":"First release on PyPI.","title":"0.1.0 (2021-11-05)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install simpleton, run this command in your terminal: 1 $ pip install simpleton This is the preferred method to install simpleton, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for simpleton can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/cmooney/simpleton Or download the tarball : 1 $ curl -OJL https://github.com/cmooney/simpleton/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install simpleton, run this command in your terminal: 1 $ pip install simpleton This is the preferred method to install simpleton, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for simpleton can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/cmooney/simpleton Or download the tarball : 1 $ curl -OJL https://github.com/cmooney/simpleton/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use simpleton in a project 1 import simpleton","title":"usage"},{"location":"usage/#usage","text":"To use simpleton in a project 1 import simpleton","title":"Usage"}]}